version: 1.0.0

vars:
  ver_yq: v3.3.1
  license_header: |
    // Ultimate Provisioner: UP cmd
    // Copyright (c) 2019 Stephen Cheng and contributors

    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

tasks:
  -
    name: deps
    desc: update key deps
    task:
      -
        func: shell
        do:
          - go list -m -versions github.com/upcmd/yq/v3
          - 'go get github.com/upcmd/yq/v3@{{.ver_yq}}'
  -
    name: build
    desc: build binary
    task:
      -
        func: shell
        desc: build the binary to build directory
        do:
          - rm -rf ./build
          - mkdir -p ./build/linux
          - mkdir -p ./build/mac
          - GOOS=darwin GOARCH=amd64 go build -o build/mac/up app/up/*.go
          - GOOS=linux GOARCH=amd64 go build -o build/linux/up app/up/*.go

  - name: release_local
    desc: release it to local path
    task:
      - func: call
        do: build

      - func: shell
        do: cp -f build/mac/up /usr/local/bin/

  -
    name: testc
    desc: test all the function tests
    task:
      -
        func: shell
        do:
          - gotest ./tests/functests/casec_test.go -v

  -
    name: log_gen_in_dev
    desc: generate all logs for the docs
    task:
      -
        func: call
        vars:
          hugo_doc_log_dir: /updocs/reflogs
          upcmd: ./build/linux/up
        do:
          - log_gen_impl

  -
    name: Log_gen_in_mac
    desc: generate all logs for the docs
    task:
      -
        func: cmd
        dvars:
          - name: hugo_doc_log_dir
            value: '{{env "HUGO_DOC_LOG_DIR"}}'
            flags: [reg]
        do:
          - name: print
            cmd: 'log will be generated at: {{.hugo_doc_log_dir}}'

      -
        func: shell
        do:
          - 'echo {{.hugo_doc_log_dir}}'
          - 'rm -rf {{.hugo_doc_log_dir}}'
          - 'mkdir -p {{.hugo_doc_log_dir}}'

      -
        func: call
        vars:
          upcmd: ./build/mac/up
        do:
          - release_local
          - log_gen_main

  -
    name: log_gen_main
    desc: main entry to process different type of cases
    task:
      -
        func: call
        do: log_gen_module
      -
        func: call
        dox: log_gen_impl
        loop:
          - c????
          - f????

  -
    name: log_gen_module
    task:

      -
        func: shell
        dvars:
          - name: moduletests_dir
            value: ./tests/modtests
            flags:
              - taskscope
        desc: |
          get mod tests dirs
          ./0001
          ......
        do:
          - 'cd {{.moduletests_dir}}; find . -name "????" -maxdepth 1 -mindepth 1 -type d|sort|cut -d\/ -f2'
        reg: cases

      - func: cmd
        desc: get the case list object
        dvars:
          - name: void
            value: '{{ .cases.Output | splitLines |reg "caselist" }}'

      - func: cmd
        do:
          - name: print
            cmd: 'caselist: {{.caselist}}'

      - func: call
        do: generate_each_module_logs
        loop: caselist

  -
    name: generate_each_module_logs
    desc: generate logs for each module
    task:
      -
        func: shell
        dvars:
          - name: casename
            value: '{{.loopitem}}'
          - name: moddir
            value: '{{.moduletests_dir}}/{{.loopitem}}'
          - name: shcmd
            value: '{{.upcmd}} ngo -d {{.moddir}} -i dev --configdir={{.moddir}} -w refdir'
            flags:
              - vvv
          - name: shoutput
            value: '> {{.hugo_doc_log_dir}}/m'
            flags:
              - vvv
        do:
          - 'echo """{{.shcmd}} -v {{.loopitem}} {{.shoutput}}{{.casename}}_{{.loopitem}}.log"""'
          - '{{.shcmd}} -v {{.loopitem}} {{.shoutput}}{{.casename}}_{{.loopitem}}.log'
        loop:
          - v
          - vv
          - vvv
          - vvvv
          - vvvvv
          - vvvvvv
          - vvvvvvv
        flags:
          - ignore_error

  -
    name: log_gen_impl
    desc: run in up docker | generate logs
    task:
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls {{.loopitem}}.yml
        reg: cases

      -
        func: cmd
        dvars:
          - name: void
            value: '{{ print .cases | splitLines |reg "caselist"}}'
            flags: [vvv]

      -
        func: cmd
        do:
          - name: print
            cmd: 'caselist {{.caselist}}'

      -
        func: call
        do: process_level
        loop: caselist

  -
    name: process_level
    desc: process different verbose level
    task:
      -
        func: shell
        dvars:
          - name: parentLoopItem
            value: '{{.loopitem}}'
          - name: shcmd
            value: '{{.upcmd}} ngo task -d ./tests/functests -t {{.parentLoopItem | replace ".yml" ""}} -i dev --configdir=./tests/functests '
            flags:
              - vvv
          - name: shoutput
            value: '> {{.hugo_doc_log_dir}}/{{.parentLoopItem | replace ".yml" ""}}'
            flags:
              - vvv
        do:
          - 'echo """{{.shcmd}} -v {{.loopitem}} {{.shoutput}}_{{.loopitem}}.log"""'
          - '{{.shcmd}} -v {{.loopitem}} {{.shoutput}}_{{.loopitem}}.log'
        loop:
          - v
          - vv
          - vvv
          - vvvv
          - vvvvv
          - vvvvvv
          - vvvvvvv
        flags:
          - ignore_error

  -
    name: testf
    desc: test the exit scenarios due to different types of validation
    task:
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls f*.yml
        reg: cases

      -
        func: shell
        desc: a real showcase of how to loop using template
        do:
          - |
            {{ range $idx, $file := .cases | splitLines -}}
            {{$casename :=  $file | replace ".yml" ""}}
            echo "==========failure case test {{$idx |add1}}==============="
            go run app/up/*.go task task -d ./tests/functests -t {{$casename}} -i dev -v vvvv
            {{end}}

  -
    name: testp
    desc: test user cases with prompt
    task:
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls p*.yml
        reg: cases

      -
        func: shell
        desc: a real showcase of how to loop using template
        do:
          - |
            {{ range $idx, $file := .cases | splitLines -}}
            {{$casename :=  $file | replace ".yml" ""}}
            echo "==========failure case test {{$idx |add1}}==============="
            go run app/up/*.go task task -d ./tests/functests -t {{$casename}} -i dev -v vvvv
            {{end}}

  -
    name: testm
    desc: test specific module
    task:
      - func: call
        do: release_local
      -
        func: shell
        dvars:
          - name: casename
            flags:
              - prompt
        do: |
          cd ./tests/modtests/{{.casename}}
          ls -lart
          up ngo

  -
    name: testx
    desc: test specific the function test
    task:
      -
        func: shell
        do:
          - gotest ./tests/functests/casex_test.go -v

  -
    name: testwip
    desc: test wip case
    task:
      -
        func: shell
        do:
          - gotest ./tests/functests/wip_test.go -v


  -
    name: wiptest
    desc: test wip
    task:
      -
        func: shell
        do:
          - go run app/up/*.go task task -d ./tests/functests -t wip -v vvvv

  -
    name: testall
    desc: test all differnt type of tests
    task:
      -
        func: call
        do:
          - testx
          - testwip
          - wiptest
          - testc

  -
    name: build_dev_docker_image
    desc: run in linux | build a nix docker image
    task:
      -
        func: shell
        do:
          - nix build
          - cp  /nix/store/*-docker-image-cmgolang.tar.gz .
          - rm -f result

  -
    name: load_dev_docker_image
    desc: run in linux | build a nix docker image
    task:
      -
        func: shell
        do:
          - ls *-docker-image-cmgolang.tar.gz

      -
        func: shell
        do:
          - 'docker load --input="{{.last_result.Output}}"'
          - docker images |grep cmgolang

  -
    name: Add_MPL2_License
    desc: Add license notice to all golang file as a notice header
    task:
      -
        func: shell
        name: getcases
        do:
          - find ./ -name "*.go"
        reg: cases

      -
        func: cmd
        dvars:
          - name: void
            value: '{{ .cases.Output | splitLines |reg "caselist" }}'
            flags: [vvv]

      -
        func: block
        desc: apply the license
        do:
          -
            func: cmd
            dvars:
              - name: filepath
                value: '{{.loopitem}}'
                flags:
                  - taskscope
            do:
              - name: readfile
                cmd:
                  filename: '{{.filepath}}'
                  reg: content
              - name: print
                cmdx: '{{.content}}'

          -
            func: cmd
            desc: apply the license if the license header has not been applied
            dvars:
              - name: licensed_code
                value: |
                  {{.license_header}}
                  {{.content}}
            do:
              - name: print
                cmd: 'processing {{.filepath}}'

              - name: writefile
                cmd:
                  content: "{{.licensed_code}}"
                  filename: '{{.filepath}}'
              -
                namex: exit
            if: '{{ not (regexMatch "MPL/2.0" .content) }}'

        loop: caselist
