version: 1.0.0

tasks:
  -
    name: build
    desc: build binary
    task:
      -
        func: shell
        desc: build the binary to build directory
        do:
          - rm -rf ./build
          - mkdir -p ./build
          - go build -o build/up app/up/*.go

  - name: release_local
    desc: release it to local path
    task:
      - func: task_ref
        do: build

      - func: shell
        do: cp -f build/up /usr/local/bin/

  -
    name: testc
    desc: test all the function tests
    task:
      -
        func: shell
        do:
          - gotest ./tests/functests/casec_test.go -v

  -
    name: log_gen
    desc: generate logs
    task:

      - func: task_ref
        do:
          - release_local
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls c????.yml
        reg: cases

      -
        func: shell
        dvars:
          - name: void
            value: '{{ print .cases | splitLines |reg "caselist"}}'
            flags: [vvv]
        do:
          - echo $HUGO_DOC_LOG_DIR
          - rm -rf $HUGO_DOC_LOG_DIR
          - mkdir -p $HUGO_DOC_LOG_DIR

      -
        func: shell
        do:
          - echo "processing {{.loopitem}}"
          - up task task -d ./tests/functests -t {{.loopitem | replace ".yml" ""}} -i dev --configdir=./tests/functests > $HUGO_DOC_LOG_DIR/{{.loopitem | replace ".yml" ""}}_v.log
          - up task task -d ./tests/functests -t {{.loopitem | replace ".yml" ""}} -i dev --configdir=./tests/functests -v vvv > $HUGO_DOC_LOG_DIR/{{.loopitem | replace ".yml" ""}}_vvv.log
          - up task task -d ./tests/functests -t {{.loopitem | replace ".yml" ""}} -i dev --configdir=./tests/functests -v vvvv> $HUGO_DOC_LOG_DIR/{{.loopitem | replace ".yml" ""}}_vvvvv.log
          - up task task -d ./tests/functests -t {{.loopitem | replace ".yml" ""}} -i dev --configdir=./tests/functests -v vvvvv> $HUGO_DOC_LOG_DIR/{{.loopitem | replace ".yml" ""}}_vvvvvv.log
        loop: caselist

  -
    name: testf
    desc: test the exit scenarios due to different types of validation
    task:
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls f*.yml
        reg: cases

      -
        func: shell
        desc: a real showcase of how to loop using template
        do:
          - |
            {{ range $idx, $file := .cases | splitLines -}}
            {{$casename :=  $file | replace ".yml" ""}}
            echo "==========failure case test {{$idx |add1}}==============="
            go run app/up/*.go task task -d ./tests/functests -t {{$casename}} -i dev -v vvvv
            {{end}}

  -
    name: testp
    desc: test user cases with prompt
    task:
      -
        func: shell
        name: getcases
        do:
          - cd ./tests/functests; ls p*.yml
        reg: cases

      -
        func: shell
        desc: a real showcase of how to loop using template
        do:
          - |
            {{ range $idx, $file := .cases | splitLines -}}
            {{$casename :=  $file | replace ".yml" ""}}
            echo "==========failure case test {{$idx |add1}}==============="
            go run app/up/*.go task task -d ./tests/functests -t {{$casename}} -i dev -v vvvv
            {{end}}

  -
    name: testx
    desc: test specific the function test
    task:
      -
        func: shell
        do:
          - gotest ./tests/functests/casex_test.go -v

  -
    name: testwip
    desc: test wip case
    task:
      -
        func: shell
        do:
          - gotest ./tests/functests/wip_test.go -v


  -
    name: wiptest
    desc: test wip
    task:
      -
        func: shell
        do:
          - go run app/up/*.go task task -d ./tests/functests -t wip -v vvvv

  -
    name: testall
    desc: test all differnt type of tests
    task:
      -
        func: task_ref
        do:
          - testx
          - testwip
          - wiptest
          - testc


