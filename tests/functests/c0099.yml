doc_meta: |
  folder: dvars
  title: datatemplate
  head: |
    Sometime you may need to do some adhoc message transformation in an elegant way, you would like to implementate your internal code or logic based on a interface / contract rather than external direct mapping. In such a scenario, it is better we could use a mapping layer to sheld your code suffering the impact of external change. We can use datatemplate for this purpose. In datatemplate definition, you map your own data structure/object with external vars/objects, then in your rendered value, you use the reference to your own object/key/value etc to generate the value required for your own business

  sections:
    - title: Relavant
      content: templating using datakey and datapath
      refs:
        - title: use datakey and datapath in templating
          link: ../../dvars/c0096

    - title: Demo
      log: yes

goal:
  - showcase the dvar to render value using sub element of an var rather the global var name space
  - extension to c0082 and c0098

vars:
  student:
    name: Tom
    gender: Male
    school: Sydney Grammar
  nsw:
    sydney:
      sgschool:
        student:
          name: Grace
          gender: Female
          school: MLC

tasks:
  -
    name: task
    task:
      -
        func: cmd
        desc: use datatemplate as datasource
        dvars:
          - name: student_info
            value: 'my name is:{{.name}} and I am in {{.school}}'
            datatemplate: |
              name: {{.nsw.sydney.sgschool.student.name}}
              gender: {{.nsw.sydney.sgschool.student.gender}}
              school: {{.nsw.sydney.sgschool.student.school}}
            flags: [vvv]
        do:
          - name: print
            cmd: '{{.student_info}}'

      -
        func: cmd
        desc: use datatemplate as datasource
        dvars:
          - name: student_info
            value: 'my name is:{{.student.name}} and I am in {{.school.name}}'
            datatemplate: |
              student:
                name: {{.nsw.sydney.sgschool.student.name}}
                gender: {{.nsw.sydney.sgschool.student.gender}}
              school:
                name: {{.nsw.sydney.sgschool.student.school}}
            flags: [vvv]
        do:
          - name: print
            cmd: '{{.student_info}}'
