doc_meta: |
  folder: flow-controll
  title: finally/resuce support in subtask level
  head: |
    Showcases the compex sub task with finally block without ignoreError flag

  sections:
    - title: Demo
      log: yes

    - title: What's the difference betwee the step level and task level finally cleanup and rescue?
      content: |
        The only difference would be that in the step level, you would be able to obtain the exec result and then conditionally do something about it

  related:
    refs:
      - title: shell func
        link: ../../quick-start/c0002/
      - title: error handling
        link: ../../test-debug/error_handling/
      - title: finally and rescue
        link: ../../flow-controll/c0174/

notes:
  - add finally support to tasks level

tasks:

  -
    name: task
    task:

      -
        func: block
        loop:
          - item1
          - item2
        desc: task
        do:
          - func: call
            do: sub_task_layer1

  -
    name: sub_task_layer1
    desc: sub_task_layer1
    task:

      -
        func: cmd
        do:
          - name: print
            cmd: "in sub_task_layer1"

      -
        func: call
        loop:
          - aaa
          - bbb
        do:
          - sub_task_layer2

  -
    name: sub_task_layer2
    task:

      -
        func: shell
        name: step1
        desc: step 1
        do:
          - 'echo """opening file: {{.loopitem}}"""'
          - echo "hello"|grep "world"

      -
        func: cmd
        name: step2
        desc: |
          in this case, since there is no ignoreError, the exception was captured by task level finaly code block
          opened file is safely closed
          to make the flow to continue to reach step2, use ignoreError
        do:
          - name: print
            cmd: step 2

    desc: |
      without rescue, the execution will return a non-zero  return code in shell and also report the error
      with rescue, the program will return 0
    rescue: true
    finally:
      -
        func: shell
        name: close_file
        desc: |
          ensure the opened file is closed
        do:
          - echo "close the file ....."
