doc_meta: |
  folder: object-oriented
  title: parse yml to object
  head: |
    Showcase you can load a yml file and parse the content to object

  sections:
    - title: How to use
      content: |
        Simply use dvar ref to load the content and also flag it to be converted toObj

        The print cmd shows how to use the object and reference in golang template to iterate through the elements

    - title: Relavant
      content: toObj cmd
      refs:
        - title: toObj cmd
          link: ../../cmd-func/c0095

    - title: Demo
      log: yes

docs:
  goal:
    - to test that I can parse this file to an object and use it in templating
    - use the format like this to automate the docs generation

  usecase:
    - used to generate auto document for up project

  usage:
    - use docs as root element to document a functest or a test case
    - two layers structure

dvars:
  - name: usecase
    ref: c0074.yml
    flags: [toObj,]

tasks:
  -
    name: task
    desc:
    task:
      -
        func: cmd
        do:
          -
            name: print
            cmd: "{{.usecase_object}}"

          -
            name: print
            cmd: "{{.usecase_object.docs}}"

          -
            name: print
            cmd: |-
              {{range $case :=.usecase_object.docs}}
              {{$case}}
              {{end}}

          -
            name: print
            cmd: |-
              {{range $head,$items :=.usecase_object.docs}}
              {{$head}}:
                {{range $idx,$item :=$items}}
                  * {{$idx|add1}}: {{$item}}
                {{end}}
              {{end}}
