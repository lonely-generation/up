doc_meta: |
  folder: design-patterns
  title: externalise task def
  head: |
    To extend further more from previous example to show that you can use ref tag to externalise detailed task to separate files, in such a way it is much tidy and clear of your main skeleton of your program and focus what you want to achieve in high level

  sections:
    - title: Relavant
      content: Externalise tasks
      refs:
        - title: externalise task and use flow
          link: ../../organization/c0059
        - title: externalise task and use flow
          link: ../../organization/c0060
        - title: externalise task and use flow
          link: ../../organization/c0061
        - title: externalise task and use tasksref
          link: ../../organization/c0062

    - title: c0081_task_compose_required_object.yml reference
      filelookup: c0081_task_compose_required_object.yml

    - title: c0081_task_render.yml reference
      filelookup: c0081_task_render.yml

    - title: Demo
      log: yes

docs:
  mddoc: |
    extend c0080 to use composible main tasks using externised flow configuration
     to make the whole task and flow clearer and modular

vars:
  complex_data_structure_template: |
    school:
      name: '{{.school_name}}'
      address: '{{.school_address}}'
    principals:
    {{- range $_, $p :=.schoo_principals }}
      - {{$p}}
    {{- end}}
    ranking: '{{.schoo_ranking}}'

dvars:
  - name: intest
    value: '{{ env "GOTEST" |default "false" }}'

tasks:
  -
    name: task
    task:
      -
        func: call
        do:
          - compose_required_object
          - render

  -
    name: compose_required_object
    desc: prepare the data object for rendering
    ref: c0081_task_compose_required_object.yml

  -
    name: render
    desc: render data
    ref: c0081_task_render.yml
