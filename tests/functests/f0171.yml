doc_meta: |
  folder: flow-controll
  title: final cleanup when shell exceution fails
  head: |
    demo the finally element will guarantee the resource cleanup when shell execution fails

  sections:
    - title: Demo
      log: yes

    - title: what will happen if there is no ignoreError for the task
      content: |
        The shell step failed, the finally step invokes the close_file task to ensure the opened file is closed

        In this way, user has the control to gracefully cleanup all relevant resources used and terminate the process to continue further. The task fails, but it is intended.

        In case user would like to continue, use can still choose to use ignoreError, then it will continue to execute the "step 2"

  related:
    refs:
      - title: shell func
        link: ../../quick-start/c0002/
      - title: error handling
        link: ../../test-debug/error_handling/

tasks:

  -
    name: task
    task:

      -
        func: shell
        desc: |
          task fails
        do:
          - echo "open a file ....."
          - echo "reading the file" |grep "cause an exception"
        finally: close_file

      -
        func: cmd
        desc: step 2
        do:
          - name: print
            cmd: step 2

  -
    name: close_file
    task:
      -
        func: shell
        name: close_file
        desc: |
          ensure the opened file is closed
        do:
          - echo "close the file ....."
