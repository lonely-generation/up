doc_meta: |
  folder: design-patterns
  title: workflow skeleton
  head: |
    When you are developing your workflow and try to achieve it step by step, you do not need to put the detailed and trivals programming code precisely in one go. You could lay the basic building blocks by puting main task, the callee(dependant) tasks for implementation there. You don't have to put detailed step and concrete implmentation, as shown in this demo, you can leave the do element empty.

    In fact, for certain steps, their jobs are probably just to do data transformation

  sections:
    - title: Demo
      log: yes

notes:
  goal:
    - to show that you can use empty do list
    - introduce a new funcname cmd to do var/dvar conversion
    - in cmd, you can also do reg/dereg var in dvar evaluation

tasks:

  -
    name: task
    task:
      -
        func: shell
        do: []

      -
        func: shell
        #this would be totally fine
        #this step could be served as skeleton work as DESIGN step
        #and leave the implementation in future to be filled in
        #you can add desc field to describe what to plan to implement

      -
        func: shell
        desc: |
          this would be totally fine too without shell commands
          this step could be served as a intermediate step to
          register a var into global var map, and it will be
          avaiable after the next step
        vars:
          a: aa
          b: bb
        dvars:
          - name: adebug
            value: "{{.a}}"
            flags: [vvvv,]

      -
        func: cmd
        desc: |
          in cmd, you can also do reg/dereg var in dvar evaluation
          the cmd func name makes more sense then shell func
          if you really want to do var manipulation only
        vars:
          c: cc
          d: dd
        dvars:
          - name: cdebug
            value: "{{.c}}"
            flags: [vvvv,]

