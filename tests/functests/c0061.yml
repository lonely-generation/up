doc_meta: |
  folder: organization
  title: use case 2
  head: |
    Showcase gradually the lengthy configuration evolve to simpler skeleton by using ref element to externalized task/flow. Please also checkout the changes of: use case 1

  sections:
    - title: Externalized the task definition - c0061-task-main.yml
      filelookup: c0061-task-main.yml

    - title: Externalized the task definition - c0061-task-complicate.yml
      filelookup: c0061-task-complicate.yml

    - title: flow element
      content: |
        Introduce the flow element to notate a task reference

        With ref element in main tasks file, this will make the entry point much cleaner and the main skeleton design stand out

    - title: Demo
      log: yes

notes:
  goal:
    - show a little bit more complicated use case with chained tasks and externalised tasks
    - show how to use condition(basics)
    - show how to use loop(basics)
    - for details of condition/loop, check the comphensive case of them separately

vars:
  student_name: tom
  classes: [1k,2b,3j,4s]

tasks:

  -
    name: task
    ref: c0061-task-main.yml
    refdir: ./tests/functests

  -
    name: a_very_complicated_task
    desc: "a_very_complicated_task"
    ref: c0061-task-complicate.yml

  -
    name: task_a
    task:
      -
        func: shell
        do:
          - echo "task_a_step1"
  -
    name: task_c
    task:
      -
        func: shell
        do:
          - echo "task_c_step1"

  -
    name: task_b
    task:
      -
        func: shell
        do:
          - echo "task_b_step1"
          - echo "{{.loopindex}} -> student nameed {{.student_name}} has been in class [{{.loopitem}}]"

