goal:
  - to show complex object using dynamic var

design:
  - to make it simple, the dvar value is always a string
  - |
    the string could be a formated yaml, so that you can
    convert it to yaml then a object
  - register the object into that scope's vars list
  - consider a modified name of -> a_smart_guy_object to reference to

expect:
  - you can reference to plain dvar with the string|untemplated value
  - you can reference to hiera structure of a object in static vars
  - you can reference to a dynamic converted dvar with new name -> a_smart_guy_object
  - fail if expand > 1 and to_object both exist

vars:
  student:
    name: Tom
    gender: Male
    address:
      suburb:
        name: sydney
        postcode: 2000
        CBD: yes
      school: Sydney Grammar


dvars:
  - name: a_smart_guy
    value: |
      name: Tom
      gender: Male
      school: Sydney Grammar
    flags: [to_object,]
#    expand: 2

  - name: school_address
    value: |
      address:
        suburb:
          name: {{.student.address.suburb.name}}
          postcode: 2000
          CBD: yes
        school: {{.student.address.school}}
    flags: [to_object,]

tasks:

  - name: task
    task:
      -
        func: shell
        do:
          - echo """a smart guy=>{{.a_smart_guy}}"""
          - echo """postcode=>{{.student.address.suburb.postcode}}"""
          - echo """school address {{.school_address}}"""
          - echo """this guy is in =>{{.a_smart_guy_object.school}} school"""
          - echo """school address object {{.school_address_object.suburb.name}}"""
          - echo """school address object -> {{.school_address_object.address.suburb.name}}"""
