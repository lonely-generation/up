doc_meta: |
  folder: vars
  title: task scope
  head: |
    So far, we have scoped vars and eventually they will be living in global runtime or local scope in a func, when you need to access the var across funcs, then you will have to define it in global runtime vars, or grouped vars scope, or register a var to glbale runtime. In this demo, we show that you can use taskScope flag to mark a dvar to be in task scope, so that you can easily access this task scope var accross different funcs

  sections:
    - title: Demo
      log: yes

notes:
  goal:
    - to introduce a implicit task vars scope for easier sharing vars in same task

vars:
  tom: this is tom

tasks:
  -
    name: task
    task:
      -
        func: cmd
        vars:
          jerry: this is jerry
        do:
          - name: print
            cmd: '{{.tom}}'
          - name: print
            cmd: '{{.jerry}}'

      -
        func: cmd
        do:
          - name: print
            desc: jerry is in local scope so there is no value
            cmd: '{{.jerry}}'

      -
        func: cmd
        dvars:
          - name: jerry
            value: this is jerry in task scope
            flags:
              - taskScope
        do:
          - name: print
            desc: this should print out the dvar value of jerry
            cmd: '{{.jerry}}'

      -
        func: cmd
        do:
          - name: print
            desc: this should print out the dvar value of jerry as it is declared jerry is in taskScope
            cmd: '{{.jerry}}'

      -
        func: cmd
        vars:
          jerry: jerry is overrided in local scope
        do:
          - name: print
            desc: var jerry in task scope is overrided by local var jerry
            cmd: '{{.jerry}}'

      -
        func: cmd
        do:
          - name: print
            desc: this should print out the jerry defined in task var scope
            cmd: '{{.jerry}}'
