doc_meta: |
  folder: call-func
  title: sequence matters in return 1
  head: |
    This shows that the sequence of the return matters. In this demo, it returns a value to caller, the following change in callee to the same var will not be reflected to caller.

    This is also an example to show that the return cmd returns the value instead of the pointer

  sections:
    - title: Demo
      log: yes

notes:
  goal:
    - demo a workflow using return in different cases
    - the location of return cmd used could result in different result in parent vars scope

vars:
  tom: this is tom in global
  jerry: this is jerry in global

tasks:
  -
    name: task
    desc: main entry
    task:
      -
        func: call
        desc: call subtask and exam the return value in following steps
        do: subtask1

      -
        func: cmd
        desc: |
          check value of tom
          in this case tom's value should come from subtask1
          tom's expected value:  tom created in subtask1
        do:
          - name: print
            cmd: 'in main task print3: {{.tom}}'

  -
    name: subtask1
    desc: subtask to test reg and return
    task:
      -
        func: cmd
        desc: check value of tom after it is registered in current task stack
        vars:
          john: john in sub_loop func1
        do:
          - name: reg
            desc: by default hitom is registered in to global context
            cmd:
              name: tom
              value: 'tom created in subtask1'

          - name: print
            cmd: 'in sub_loop print1: {{.tom}}'

      -
        func: cmd
        desc: check value of tom and it should be available in current stack
        vars:
          john: john in sub_loop func2
        do:
          - name: print
            cmd: 'in sub_loop print2: {{.tom}}'

          - name: return
            cmd:
              - tom

      -
        func: call
        desc: call subtask and exam the return value in following steps
        do: subtask2


  -
    name: subtask2
    desc: subtask to test reg and return
    task:
      -
        func: cmd
        desc: check value of tom after it is registered in current task stack
        vars:
          john: john in sub_loop func1
        do:
          - name: reg
            desc: by default hitom is registered in to global context
            cmd:
              name: tom
              value: 'tom2 created in subtask2'

          - name: print
            cmd: 'in sub_loop print1: {{.tom}}'

      -
        func: cmd
        desc: check value of tom and it should be available in current stack
        vars:
          john: john in sub_loop func2
        do:
          - name: print
            cmd: 'in sub_loop print2: {{.tom}}'

          - name: return
            cmd:
              - tom

