doc_meta: |
  folder: vars
  title: local vs reg global
  head: |
    Showcase that local var is only available in local runtime for that func, if you need to use it global runtime, you will need to use template func reg or reg cmd to set it in global runtime

  sections:
    - title: Prerequisites
      content: |
        * template reg action
        * reg cmd
      refs:
        - title: template reg action
          link: ../../template/c0042/
        - title: reg cmd
          link: ../../cmd-func/c0066/

    - title: Demo
      log: yes

  related:
    refs:
      - title: default golang template reference
        link: https://golang.org/pkg/text/template/

tasks:

  -
    name: task
    desc: test the exit scenarios due to different types of validation
    task:
      -
        func: shell
        desc: step1
        do:
          - echo hanks

      -
        func: cmd
        desc: |
          test register a variable to global vars
          the reg_hello should be <no value> since this is a template action
          you should really use dvar name void instead
        dvars:
          - name: reg_hello
            value: |
              {{.last_result.Output |reg "hellomsg" }}

      -
        func: shell
        do:
          - echo "{{.reg_hello}}"
          - echo "{{.hellomsg}}"

      -
        func: cmd
        desc: |
          the reg_tom's value is a object, but since reg_tom is only a local, it
          will probably not very useful
        vars:
          person:
            name: tom
            age: 18
        dvars:
          - name: local_tom
            value: |-
              my name is tom
              {{.person |reg "tom" }}
            flags: [vvv]
        do:
          - name: reg
            cmd:
              name: global_tom
              value: '{{.local_tom}}'

      -
        func: cmd
        desc: debug the results
        vars:
          objname: global_tom
        do:
          - name: print
            desc: this local_tom should be <no value> as it is in scope of last step
            cmd: "{{.local_tom}}"

          - name: print
            desc: get the object from register global space
            cmd: "{{.tom}}"

          - name: printObj
            desc: "dynamically reference to global_tom object registered"
            cmd: "{{.objname}}"

