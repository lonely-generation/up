doc_meta: |
  folder: flow-controll
  title: guaranteed final step to ensure clean up/rescue
  head: |
    Introduce to use finally/rescue in task step for a guranteed cleanup when task step has got panic

  sections:
    - title: Demo
      log: yes


    - title: what will happen if there is no rescue for the task without rescue
      content: |
        This showcases that the finally step invokes the close_file task to ensure the opened file is closed

        The task will fail if there is no rescue to be "true", in this case, user choose to fail the task, or if rescue is set, then the execution will continue to the next func step call


  related:
    refs:
      - title: shell func
        link: ../../quick-start/c0002/
      - title: error handling
        link: ../../test-debug/error_handling/
      - title: shell step fails
        link: ../../flow-controll/f0171/

notes:
  - add feature of finally run code
  - add feature to rescue from panic

tasks:

  -
    name: task
    task:

      -
        func: cmd
        desc: step 1
        do:
          - name: print
            cmd: step 1
          - name: panic
          - name: print
            cmd: extra step ......... it will never reach here
        rescue: true
        finally: close_file

      -
        func: cmd
        desc: step 2
        do:
          - name: print
            cmd: step 2

  -
    name: close_file
    task:
      -
        func: shell
        name: close_file
        desc: |
          ensure the opened file is closed
        do:
          - echo "close the file ....."
