vars:
  folder: module
  title: multi module calls
  weight: 2150
  log: yes
  head: |
    Showcase the multple module calls

    Things will get complicated if your main task invoke a module A.taskA, then module A result in another task call to module B.taskB.

    Many programming language has the issue of dependency hell. It will break simply becuase of different version of different modules

    UP cmd support two approaches to manage the dependencies, the first one s to manage the dependency statically under a local directory, either it is a relative direectory to your work directory, or abosolute path in your system; the second one is to manage multiple versions of same module in its version directories

  sections:
    - title: Use local directory as module code base
      content: |
        Simply saying, you will define all required modules and versions in that module's configuration upconfig.yml file. It's like a jailed execution for that module to pull all required modules and defined versions

        ```
        myproject
        ├── hello-module
        │   ├── up.yml
        │   └── upconfig.yml
        ├── hi-module
        │   └── up.yml
        ├── world-module
        │   ├── up.yml
        │   └── upconfig.yml
        ├── up.yml
        └── upconfig.yml
        ```

        In this case, the call flow is:
        ```
        main task -> hello-module.Say_hello -> hi-module.Say_hi
        ```

        The below module config to call hi-module will be under management of hello-module, in myproject/hello-module/upconfig.yml
        ```
        Modules:

          -
            dir: hi-module/
            alias: hi-module
        ```

        Please notice that the world-module is configured in the same way, the hi-module is in its own path but not globally shared and dynamically linked

        pros:
        * the callee module is statically linked
        * the callee module could be different version, so there is no compatibility issue at all, hence it will utterly avoid problems like below:
          * the time you upgrade is the time start failing
          * demanding one version fitting all
          * demanding you must upgrade all components' version so that the code could work

        con:
        * none

        When your code is maturer enough, you might want to publish your own local module directory under your project code base. You wrap up code into an exported task, check in your module directory as a git repo. You can start sharing module with different teams and after that you can use the second way to refer to the module using your repo url and remove your local directory from your project code base.



    - title: config file - upconfig.yml
      filelookup: upconfig.yml

    - title: up task - up.yml
      filelookup: up.yml

    - title: up module task - up.yml
      filelookup: hello-module/up.yml

    - title: up module config - upconfig.yml
      filelookup: hello-module/upconfig.yml

    - title: hi module task - up.yml
      filelookup: hi-module/up.yml
