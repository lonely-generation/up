vars:
  folder: module
  title: jailed exec context
  weight: 2144
  log: yes
  head: |
    Showcase that the execution context for module will be jaied in its own exontext based on its own configuration or default settings

  sections:
    - title: How does it work?
      content: |
        In this case, you will see:
        * Even though the same name of "internal_task" presents in both caller and module task file, the call func will locate the right one within its own execution context.

        * You can see that the shell executions are all relevant to its own workdir, but will not be influenced by its caller. This guarantees the stability and certainty of third party module, with this feature, community members can collaborate together to come out of shared modules easily with predictable results

    - title: config file - upconfig.yml
      filelookup: upconfig.yml

    - title: up task - up.yml
      filelookup: up.yml

    - title: up module task - up.yml
      filelookup: hello-module/up.yml
