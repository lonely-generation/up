
version: 1.0.0
Verbose: vvv
MaxCallLayers: 8
RefDir: .
TaskFile: up.yml
ConfigDir: .
ConfigFile: upconfig.yml

Modules:
  #clone the repo, repo name will be the module name
  #version==empty, then it will use master
  #dir==empty, it will use cloned git repo root dir
  #dir==empty, then mod.dir will be auto mapped to repo name
  - repo: https://github.com/upcmd/hello-module.git
    _dir: sayhi
    _alias: sayhi
    _version: master
    _iid: noname

    #allowed: manual | always | skip
    #skip: if repo exist already, then skip it and do not pull, this is the default if it is not configured
    #manual: if repo exist already, then stop processing and fails straight away
    #always: if repo exist already, then delete it and repull from remote again
  - repo: https://github.com/upcmd/module-a.git
    pullpolicy: always

    #if both repo and dir exist, then the repo will be cloned to be named to dir name
  - repo: https://github.com/upcmd/hello-module.git
    dir: himodule
    alias: himodule
    _version: master
    _iid: noname

    #this is to use sub directory ./sayhi/a/b as the module location instead of root repo dir
  - repo: https://github.com/upcmd/module-b.git
    subdir: a/b
    alias: module-b-subdir
    _dir: sayhi
    :>alias: require setup to make it clear what the module name is
    _version: master
    _iid: noname

    #use version value as tag name to check it out
  - repo: https://github.com/upcmd/module-c.git
    version: 1.0.0
    _dir: sayhi
    _alias: sayhi
    _iid: noname

    #the alias will be a translated name to be uesd in caller's code base
    #eg, call: hi.SayHiTask, without alias, you will have to use sayhi.SayHiTask
    #this is to just to avoid duplicated repo name, eg: https://github.com/somethingeles/sayhi.git
  - repo: https://github.com/upcmd/hello-module.git
    alias: hi
    _version: master
    _dir: sayhi
    _iid: noname

    #sha value is a specific value to checkout if it presents as version
  - repo: https://github.com/up/sayhello.git
    version: abc123e
    _alias: sayhello
    _dir: sayhello
    _iid: noname

  - #if there is no repo, then it will use the dir as module and incorporate as module
    #if
    dir: c/d
    alias: a_relative_dir_module
    :>alias: require setup to make it clear what the module name is
    _iid: noname

  - #if there is no repo, then it will use the dir as module and incorporate as module
    dir: c/d
    alias: himod
    _iid: noname

    #you can use absolute path for dir to be the location of a module
  - dir: /etc/c/d
    :>alias: require setup to make it clear what the module name is
    alias: absolute_path_module
    _iid: noname

    #iid is the instance id, which could be used in module, if it is empty then use default nonamed
  - dir: /etc/c/d
    :>alias: require setup to make it clear what the module name is
    alias: absolute_path_with_iid_module
    iid: dev

