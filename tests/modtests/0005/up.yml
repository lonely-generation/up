doc_meta: |
  folder: module
  title: return value
  head: |
    Showcase the return value from module

  sections:
    - title: How does it work?
      content: |
        In this demo, the var b from module is returned to caller

        Pleas note that the two vars used in Say_world will produce the result based on the input, the var a is passed in from external caller and overriden. This is a design pattern of IOC - inverse of controll, a feature to allow consumer code to inject data to module, and the module will focus on detailed implementation

    - title: Demo
      log: yes

notes:
  - see if callers vars could be passed to module's func

vars:
  a: caller-global-aaa
  b: caller-global-bbb

tasks:
  -
    name: Main
    desc: main entry
    task:

      -
        func: cmd
        do:
          -
            name: inspect
            desc: the vars in caller before invoking module task
            cmd:
              - exec_vars
              - exec_base_vars

      -
        func: call
        do: hello-module.Say_world

      -
        func: cmd
        do:
          -
            name: inspect
            desc: the vars in caller after invoking module task
            cmd:
              - exec_vars
              - exec_base_vars

#          -
#            name: assert
#            des: |
#              var b is returned from module
#            cmd:
#              - '{{eq .a "caller-aaa"}}'
#              - '{{eq .b "module-bbb"}}'
