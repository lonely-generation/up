                       println : "fmt.Sprintln"
                            eq : "eq"
                            ge : "ge"
                            le : "le"
                            ne : "ne"
                          call : "call"
                         index : "index"
                            or : "or"
                        printf : "fmt.Sprintf"
                            lt : "lt"
                           and : "and"
                          html : "HTMLEscaper"
                            js : "JSEscaper"
                         print : "fmt.Sprint"
                           len : "length"
                           not : "not"
                      urlquery : "URLQueryEscaper"
                            gt : "gt"
                        splitn : (func(string, int, string) map[string]string)(0x14b8530)
                           ext : (func(string) string)(0x11ab2b0)
                          add1 : (func(interface {}) int64)(0x14b9bf0)
                    dateInZone : (func(string, interface {}, string) string)(0x14ae7f0)
                        b32enc : (func(string) string)(0x14b6a80)
                     striptags : (func(string) string)(0x14c52f0)
                  toPrettyJson : (func(interface {}) string)(0x14afd50)
                         yesno : (func(string, string, bool) string)(0x14c2650)
                          list : (func(...interface {}) []interface {})(0x14b1790)
                           has : (func(interface {}, interface {}) bool)(0x14b4520)
                         slice : (func(interface {}, ...interface {}) interface {})(0x14b48d0)
                      deepCopy : (func(interface {}) interface {})(0x14b14b0)
                            OS : (func() string)(0x14cbd90)
                      mustPush : (func(interface {}, interface {}) ([]interface {}, error))(0x14b1860)
                        append : (func(interface {}, interface {}) []interface {})(0x14b17b0)
                        hasKey : (func(map[string]interface {}, string) bool)(0x14b0400)
                           sub : (func(interface {}, interface {}) int64)(0x14b9d00)
                          trim : (func(string) string)(0x10ee4a0)
                        b32dec : (func(string) string)(0x14b6b20)
                           div : (func(interface {}, interface {}) int64)(0x14b9d80)
                    decryptAES : (func(string, string) (string, error))(0x14ae2c0)
                         merge : (func(map[string]interface {}, ...map[string]interface {}) interface {})(0x14b0d80)
                 genSignedCert : (func(string, []interface {}, []interface {}, int, sprig.certificate) (sprig.certificate, error))(0x14ac850)
                    regexSplit : (func(string, string, int) []string)(0x14b6600)
                 truncatechars : (func(int, string) string)(0x14c0cb0)
                   divisibleby : (func(interface {}, interface {}) bool)(0x14c1050)
                       default : (func(interface {}, ...interface {}) interface {})(0x14af4e0)
                        plural : (func(string, string, int) string)(0x14b77c0)
                       nospace : (func(string) string)(0x149f730)
                     urlencode : (func(string) string)(0x14c0ee0)
                randomintrange : (func(int, int, interface {}) int)(0x14c5160)
                     mustSlice : (func(interface {}, ...interface {}) (interface {}, error))(0x14b4980)
                     hasPrefix : (func(string, string) bool)(0x14b99f0)
                          date : (func(string, interface {}) string)(0x14ae640)
                     camelcase : (func(string) string)(0x14a05b0)
                          ceil : (func(interface {}) float64)(0x14b57b0)
                     mustMerge : (func(map[string]interface {}, ...map[string]interface {}) (interface {}, error))(0x14b0ea0)
                        length : (func(interface {}) int)(0x14c0970)
                      apnumber : (func(interface {}) interface {})(0x14c30e0)
                mustRegexSplit : (func(string, string, int) ([]string, error))(0x14b66a0)
                      capfirst : (func(string) string)(0x14c2080)
                         tuple : (func(...interface {}) []interface {})(0x14b1790)
                      mustUniq : (func(interface {}) ([]interface {}, error))(0x14b3b80)
    mustRegexReplaceAllLiteral : (func(string, string, string) (string, error))(0x14b6510)
                       float64 : (func(interface {}) float64)(0x14b5230)
                    dateModify : (func(string, time.Time) time.Time)(0x14aeb20)
                mustDateModify : (func(string, time.Time) (time.Time, error))(0x14aebf0)
                          keys : (func(...map[string]interface {}) []string)(0x14b0620)
                        abbrev : (func(int, string) string)(0x14b6bf0)
                       ordinal : (func(interface {}) string)(0x14c3cf0)
                     regexFind : (func(string, string) string)(0x14b6190)
                        typeIs : (func(string, interface {}) bool)(0x14b5a60)
                        toJson : (func(interface {}) string)(0x14afc00)
                      initials : (func(string) string)(0x14b6d30)
                     sha256sum : (func(string) string)(0x14aa950)
                      htmlDate : (func(interface {}) string)(0x14ae6d0)
                    trimPrefix : (func(string, string) string)(0x14b97d0)
                         hello : (func() string)(0x14b9530)
                   mustPrepend : (func(interface {}, interface {}) ([]interface {}, error))(0x14b1cf0)
                        random : (func(interface {}) interface {})(0x14c4d10)
                         dereg : (func(string) string)(0x14cc080)
                       untitle : (func(string) string)(0x14b6f50)
                    mustToJson : (func(interface {}) (string, error))(0x14afc90)
                       compact : (func(interface {}) []interface {})(0x14b3670)
                          base : (func(string) string)(0x11ab300)
                      coalesce : (func(...interface {}) interface {})(0x14afb40)
                        semver : (func(string) (*semver.Version, error))(0x14b68a0)
                        typeOf : (func(interface {}) string)(0x14b5c90)
                         round : (func(interface {}, int, ...float64) float64)(0x14b5830)
                     hasSuffix : (func(string, string) bool)(0x14b9a60)
                    abbrevboth : (func(int, int, string) string)(0x14b6c80)
                     toDecimal : (func(interface {}) int64)(0x14b59a0)
                           min : (func(interface {}, ...interface {}) int64)(0x14b5400)
                derivePassword : (func(uint32, string, string, string, string) string)(0x14aae00)
                     unixEpoch : (func(time.Time) string)(0x14af450)
                 semverCompare : (func(string, string) (bool, error))(0x14b6790)
                       initial : (func(interface {}) []interface {})(0x14b2c30)
                        kindOf : (func(interface {}) string)(0x14b5db0)
                        substr : (func(int, int, string) string)(0x14b8710)
                 durationRound : (func(interface {}) string)(0x14aee60)
                         floor : (func(interface {}) float64)(0x14b5730)
                filesizeformat : (func(interface {}) string)(0x14c2b50)
                        exeExt : (func() string)(0x14cbfd0)
                    encryptAES : (func(string, string) (string, error))(0x14ade10)
                         trunc : (func(int, string) string)(0x14b8210)
                    trimSuffix : (func(string, string) string)(0x14b96f0)
               buildCustomCert : (func(string, string) (sprig.certificate, error))(0x14abe40)
                      toString : (func(interface {}) string)(0x14b7fd0)
                     randAlpha : (func(int) string)(0x14b6df0)
                         clean : (func(string) string)(0x11aa7b0)
                        repeat : (func(int, string) string)(0x14b95a0)
                         int64 : (func(interface {}) int64)(0x14b52e0)
                     randAscii : (func(int) string)(0x14b6e60)
                           int : (func(interface {}) int)(0x14b5290)
            mustMergeOverwrite : (func(map[string]interface {}, ...map[string]interface {}) (interface {}, error))(0x14b1170)
                      mustLast : (func(interface {}) (interface {}, error))(0x14b2210)
                          omit : (func(map[string]interface {}, ...string) map[string]interface {})(0x14b0950)
                   randNumeric : (func(int) string)(0x14b6ee0)
                       toSlash : (func(string) string)(0x14cbfb0)
                         until : (func(int) []int)(0x14b54d0)
                          push : (func(interface {}, interface {}) []interface {})(0x14b17b0)
                         unset : (func(map[string]interface {}, string) map[string]interface {})(0x14b0390)
                         upper : (func(string) string)(0x10ed520)
                     untilStep : (func(int, int, int) []int)(0x14b5550)
                      lengthis : (func(int, interface {}) bool)(0x14c1de0)
              must_date_modify : (func(string, time.Time) (time.Time, error))(0x14aebf0)
                     kebabcase : (func(string) string)(0x14a09b0)
                         pluck : (func(string, ...map[string]interface {}) []interface {})(0x14b0470)
                       without : (func(interface {}, ...interface {}) []interface {})(0x14b4050)
                     toRawJson : (func(interface {}) string)(0x14afef0)
                          pick : (func(map[string]interface {}, ...string) map[string]interface {})(0x14b0800)
                       sha1sum : (func(string) string)(0x14aaaa0)
                          wrap : (func(int, string) string)(0x14b9880)
                   mustInitial : (func(interface {}) ([]interface {}, error))(0x14b2cc0)
                          fail : (func(string) (string, error))(0x14ba060)
                         empty : (func(interface {}) bool)(0x14af5e0)
                    regexMatch : (func(string, string) bool)(0x14b5f10)
                       biggest : (func(interface {}, ...interface {}) int64)(0x14b5330)
                       prepend : (func(interface {}, interface {}) []interface {})(0x14b1c40)
                        concat : (func(...interface {}) interface {})(0x14b4cd0)
                  mustDeepCopy : (func(interface {}) (interface {}, error))(0x14b15a0)
                           dir : (func(string) string)(0x11ab440)
                     toStrings : (func(interface {}) []string)(0x14b7800)
                           mod : (func(interface {}, interface {}) int64)(0x14b9e20)
                       reverse : (func(interface {}) []interface {})(0x14b3290)
                        squote : (func(...interface {}) string)(0x14b7220)
                        kindIs : (func(string, interface {}) bool)(0x14b5d30)
               regexReplaceAll : (func(string, string, string) string)(0x14b62e0)
                   findreplace : (func(string, string, string) string)(0x14c0550)
                       ternary : (func(interface {}, interface {}, bool) interface {})(0x14b0200)
                          atoi : (func(string) int)(0x14b9b00)
                    splitLines : (func(string) []string)(0x14cbeb0)
                    mustAppend : (func(interface {}, interface {}) ([]interface {}, error))(0x14b1860)
                mustRegexMatch : (func(string, string) (bool, error))(0x14b5f80)
                    mustToDate : (func(string, string) (time.Time, error))(0x14af390)
                        toDate : (func(string, string) time.Time)(0x14af2f0)
                  date_in_zone : (func(string, interface {}, string) string)(0x14ae7f0)
                   mustCompact : (func(interface {}) ([]interface {}, error))(0x14b3700)
                        b64dec : (func(string) string)(0x14b69b0)
                        center : (func(int, string) string)(0x14c2980)
                       shuffle : (func(string) string)(0x14a1290)
                           now : (func() time.Time)(0x14b9550)
                         genCA : (func(string, int) (sprig.certificate, error))(0x14ac3b0)
                           reg : (func(string, interface {}) string)(0x14cbfe0)
                mergeOverwrite : (func(map[string]interface {}, ...map[string]interface {}) interface {})(0x14b0fd0)
                       trimall : (func(string, string) string)(0x14b9610)
                     sortAlpha : (func(interface {}) []string)(0x14b3040)
                 mustRegexFind : (func(string, string) (string, error))(0x14b6210)
                   mustReverse : (func(interface {}) ([]interface {}, error))(0x14b3320)
                         ljust : (func(int, string) string)(0x14c2850)
                      swapcase : (func(string) string)(0x149ffa0)
                         first : (func(interface {}) interface {})(0x14b24c0)
                         lower : (func(string) string)(0x10ed810)
                       replace : (func(string, string, string) string)(0x14b7720)
                      intcomma : (func(interface {}) string)(0x14c3650)
                          ARCH : (func() string)(0x14cbdb0)
                           ago : (func(interface {}) string)(0x14aecd0)
                     mustFirst : (func(interface {}) (interface {}, error))(0x14b2550)
                         rjust : (func(int, string) string)(0x14c2710)
                    typeIsLike : (func(string, interface {}) bool)(0x14b5b20)
                       mustHas : (func(interface {}, interface {}) (bool, error))(0x14b45b0)
                        b64enc : (func(string) string)(0x14b6910)
                          dict : (func(...interface {}) map[string]interface {})(0x14b0be0)
           mustRegexReplaceAll : (func(string, string, string) (string, error))(0x14b6380)
                 mustToRawJson : (func(interface {}) (string, error))(0x14aff70)
                      contains : (func(string, string) bool)(0x14b9980)
                      mustRest : (func(interface {}) ([]interface {}, error))(0x14b2890)
                          rest : (func(interface {}) []interface {})(0x14b2800)
                           max : (func(interface {}, ...interface {}) int64)(0x14b5330)
                      catLines : (func(string) string)(0x14cbdd0)
                           mul : (func(interface {}, ...interface {}) int64)(0x14b9ec0)
              mustRegexFindAll : (func(string, string, int) ([]string, error))(0x14b60a0)
                        values : (func(map[string]interface {}) []interface {})(0x14b1320)
                          join : (func(string, interface {}) string)(0x14b82b0)
                         title : (func(string) string)(0x10edc50)
                     snakecase : (func(string) string)(0x14a0940)
                           add : (func(...interface {}) int64)(0x14b9c50)
        regexReplaceAllLiteral : (func(string, string, string) string)(0x14b6470)
                       trimAll : (func(string, string) string)(0x14b9680)
                       urlJoin : (func(map[string]interface {}) string)(0x14b9130)
                           cat : (func(...interface {}) string)(0x14b7450)
                         quote : (func(...interface {}) string)(0x14b6fc0)
                          uniq : (func(interface {}) []interface {})(0x14b3af0)
             genSelfSignedCert : (func(string, []interface {}, []interface {}, int) (sprig.certificate, error))(0x14ac5f0)
                           set : (func(map[string]interface {}, string, interface {}) map[string]interface {})(0x14b02f0)
                      wrapWith : (func(int, string, string) string)(0x14b9900)
                        indent : (func(int, string) string)(0x14b7550)
                     splitList : (func(string, string) []string)(0x14b9b50)
                           get : (func(map[string]interface {}, string) interface {})(0x14b0240)
                      urlParse : (func(string) map[string]interface {})(0x14b8b30)
                  regexFindAll : (func(string, string, int) []string)(0x14b6000)
                     pluralize : (func(string, interface {}) string)(0x14c21c0)
                 genPrivateKey : (func(string) string)(0x14ab640)
                   mustWithout : (func(interface {}, ...interface {}) ([]interface {}, error))(0x14b4110)
                     expandenv : (func(string) string)(0x14b9ff0)
                     fromSlash : (func(string) string)(0x14cbf90)
                   date_modify : (func(string, time.Time) time.Time)(0x14aeb20)
                     deepEqual : (func(interface {}, interface {}) bool)(0x10801e0)
                 getHostByName : (func(string) string)(0x14b5150)
                htmlDateInZone : (func(interface {}, string) string)(0x14ae760)
              mustToPrettyJson : (func(interface {}) (string, error))(0x14afe00)
   validateMandatoryFailIfNone : (func(string, string) string)(0x14cc0e0)
                         isAbs : (func(string) bool)(0x11ab420)
                     wordcount : (func(string) int)(0x14c0fa0)
                        uuidv4 : (func() string)(0x14aace0)
                       nindent : (func(int, string) string)(0x14b7690)
                  randAlphaNum : (func(int) string)(0x14b6da0)
                    adler32sum : (func(string) string)(0x14aabe0)
                         split : (func(string, string) map[string]string)(0x14b8350)
                           env : (func(string) string)(0x14b9f90)
                          last : (func(interface {}) interface {})(0x14b2180)
